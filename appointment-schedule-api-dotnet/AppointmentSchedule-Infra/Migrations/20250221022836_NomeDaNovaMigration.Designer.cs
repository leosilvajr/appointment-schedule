// <auto-generated />
using System;
using AppointmentSchedule_Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentSchedule_Infra.Migrations
{
    [DbContext(typeof(AppointmentScheduleContext))]
    [Migration("20250221022836_NomeDaNovaMigration")]
    partial class NomeDaNovaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_admin");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.Appointment", b =>
                {
                    b.Property<int>("Id_appointment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_appointment");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("booking_date");

                    b.Property<string>("BookingHour")
                        .HasColumnType("TEXT")
                        .HasColumnName("booking_hour");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_doctor");

                    b.Property<int>("IdService")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_service");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_user");

                    b.HasKey("Id_appointment");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdService");

                    b.HasIndex("IdUser");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.Doctor", b =>
                {
                    b.Property<int>("Id_doctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_doctor");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Specialty")
                        .HasColumnType("TEXT")
                        .HasColumnName("specialty");

                    b.HasKey("Id_doctor");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.DoctorService", b =>
                {
                    b.Property<int>("IdDoctorService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_doctor_service");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_doctor");

                    b.Property<int>("IdService")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_service");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.HasKey("IdDoctorService");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdService");

                    b.ToTable("doctors_services");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.Service", b =>
                {
                    b.Property<int>("Id_service")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_service");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.HasKey("Id_service");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.User", b =>
                {
                    b.Property<int>("Id_user")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_user");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.HasKey("Id_user");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.Appointment", b =>
                {
                    b.HasOne("AppointmentSchedule_Domain.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedule_Domain.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedule_Domain.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.DoctorService", b =>
                {
                    b.HasOne("AppointmentSchedule_Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorServices")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentSchedule_Domain.Models.Service", "Service")
                        .WithMany("DoctorServices")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorServices");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorServices");
                });

            modelBuilder.Entity("AppointmentSchedule_Domain.Models.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
